/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    // Recursive solution 1:
//     vector<int> preorder(Node* root) {
//         vector<int> ans;
//         if(root == NULL){
//             return ans;
//         }
//         int i;
//         for(Node* child : root->children){
//             if(child->children.size() == 0){
//                 ans.push_back(child->val);
//             }
//             else{
//                 vector<int> v = preorder(child);
//                 ans.insert(ans.end(), v.begin(), v.end());
//             }
            
//         }
//         ans.insert(ans.begin(), root->val);
//         return ans;
//     }
    
    //Recursive solution 2:
    // vector<int> ans;
    // void traverse(Node* root){
    //     if(root == NULL)
    //         return;
    //     ans.push_back(root->val);
    //     for(Node* child : root->children){
    //         traverse(child);
    //     }
    // }
    // vector<int> preorder(Node* root) {
    //     traverse(root);
    //     return ans;
    // }
    
    //Itrrative solution:
    vector<int> preorder(Node* root) {
        stack<Node*> st;
        vector<int> ans;
        if(root == NULL)
            return ans;
        st.push(root);
        while(!st.empty()){
            root = st.top();
            st.pop();
            ans.push_back(root->val);
            for(int i=root->children.size()-1;i>=0;i--){
                st.push(root->children[i]);
            }
        }
        return ans;
    }
};