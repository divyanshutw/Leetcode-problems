/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution {
public:
    // Recursive mehtod without using BST properties
    // TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
    //     if(root == NULL){
    //         return NULL;
    //     }
    //     if(root == p || root == q){
    //         return root;
    //     }
    //     TreeNode* left,*right;
    //     left = lowestCommonAncestor(root->left, p, q);
    //     right = lowestCommonAncestor(root->right, p, q);
    //     if(left != NULL && right != NULL){
    //         return root;
    //     }
    //     if(left != NULL){
    //         return left;
    //     }
    //     if(right != NULL){
    //         return right;
    //     }
    //     return NULL;
    // }
    
    
    //Recursive method using BST properties
    // TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
    //     if(root == NULL){
    //         return NULL;
    //     }
    //     if(p->val <= root->val && q->val >= root->val || p->val >= root->val && q->val <= root->val){
    //         return root;
    //     }
    //     if(p->val <= root->val && q->val <= root->val){
    //         return lowestCommonAncestor(root->left,p,q);
    //     }
    //     return lowestCommonAncestor(root->right,p,q);
    // }
    
    
    //Iterative method
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        TreeNode* ptr=root;;
        while(true){
           if(p->val <= ptr->val && q->val >= ptr->val || p->val >= ptr->val && q->val <= ptr->val){
                return ptr;
            }
            if(p->val <= ptr->val && q->val <= ptr->val){
                ptr = ptr->left;
            } 
            else{
                ptr = ptr->right;
            }
        }
        return root;
    }
};