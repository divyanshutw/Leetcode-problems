/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        if(root == NULL){
            return NULL;
        }
        vector<Node*> v,bfs;
        int i,p=2;
        v.push_back(root);
        bfs.push_back(root);
        while(!v.empty()){
            if(v[0]->left != NULL){
                v.push_back(v[0]->left);
                bfs.push_back(v[0]->left);
            }
            if(v[0]->right != NULL){
                v.push_back(v[0]->right);
                bfs.push_back(v[0]->right);
            }
            v.erase(v.begin());
        }
        for(i=0;i<bfs.size()-1;i++){
            if(i == p-2){
                bfs[i]->next = NULL;
                p *= 2;
            }
            else{
                bfs[i]->next = bfs[i+1];
            }
        }
        bfs[i]->next = NULL;
        return root;
    }
};