/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int max = 0;
    int maxHeight(TreeNode* root){
        if(root == NULL){
            return 0;
        }
        int l = 0;
        int r = 0;
        if(root->left != NULL){
            l = maxHeight(root->left);
        }
        if(root->right != NULL){
            r = maxHeight(root->right);
        }
        if(l+r > max){
            max = l+r;
        }
        return std::max(l,r)+1;
        
    }
    int diameterOfBinaryTree(TreeNode* root) {
        maxHeight(root);
        return max;
    }
};