/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int poPos = postorder.size() - 1, inPos = poPos;
        return buildTreeNode(inorder, postorder, INT_MIN, poPos, inPos);
    }
    TreeNode* buildTreeNode(vector<int>& inorder, vector<int>& postorder, int stop, int& poPos, int& inPos) {
        if (poPos < 0) return nullptr;
        if (inorder[inPos] == stop) {
            inPos--;
            return nullptr;
        }
        
        TreeNode* node = new TreeNode(postorder[poPos--]);
        node->right = buildTreeNode(inorder, postorder, node->val, poPos, inPos);
        node->left = buildTreeNode(inorder, postorder, stop, poPos, inPos);
        return node;
    }
};