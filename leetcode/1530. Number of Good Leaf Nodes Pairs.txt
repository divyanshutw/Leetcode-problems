/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    // BRUTE FORCE
    
    
//     vector<TreeNode*> leaves;
//     void countLeaves(TreeNode* root)
//     {
//         if(root!=NULL)
//         {
//             if(root->left==NULL && root->right==NULL)
//                 leaves.push_back(root);
//             else if(root->left==NULL)
//                 countLeaves(root->right);
//             else if(root->right==NULL)
//                 countLeaves(root->left);
//             else
//             {
//                 countLeaves(root->left);
//                 countLeaves(root->right);
//             }
//         }
//     }
    
//     int flag=0,path=0;
//     int lowest(TreeNode* root,TreeNode* leaf1,TreeNode* leaf2)
//     {
//         if(root->left==NULL && root->right==NULL)
//         {
//             if(root==leaf1 || root==leaf2)
//                 return 0;
//             else
//                 return -1;
//         }
//         else if(root->left==NULL)
//         {
//             int a= lowest(root->right,leaf1,leaf2);
//             if(a==-1)
//                 return -1;
//             return a+1;
//         }
//         else if(root->right==NULL)
//         {
//             int a= lowest(root->left,leaf1,leaf2);
//             if(a==-1)
//                 return -1;
//             return a+1;
//         }
//         else
//         {
//             int left=lowest(root->left,leaf1,leaf2);
//             int right=lowest(root->right,leaf1,leaf2);
//             if(left==-1 && right==-1)
//                 return -1;
//             if(left==-1)
//                 return right+1;
//             if(right==-1)
//                 return left+1;
//             if(flag==0)
//             {
//                 path=left+right+2;
//                 flag=1;
//             }
//             return left+right+2;
//         }
//     }
//    
//     int countPairs(TreeNode* root, int dist) {
//         countLeaves(root);
//         int i,j,cnt=0,low;
//         for(i=0;i<leaves.size()-1;i++)
//         {
//             for(j=i+1;j<leaves.size();j++)
//             {
//                 flag=0;path=0;
//                 lowest(root,leaves.at(i),leaves.at(j));
//                 if(path<=dist)
//                     cnt++;
//             }
//         }
//         return cnt;
//     }
    
    
    
    // USING VECTOR AND BACKTRACKING
    
    
    vector<int> inc(vector<int> v1){
        for(int i=0;i<v1.size();i++){
            v1[i]++;
        }
        return v1;
    }
    
    int cnt = 0;
    
    vector<int> traverse(TreeNode* root, int d){
        if(root == NULL){
            vector<int> v;
            return v;
        }
        if(root->left == NULL && root->right == NULL){
            vector<int> v;
            v.push_back(0);
            return v;
        }
        int i,j;
        vector<int> v1 = traverse(root->left, d);
        vector<int> v2 = traverse(root->right, d);
        v1 = inc(v1);
        v2 = inc(v2);
        for(i=0;i<v1.size();i++){
            for(j=0;j<v2.size();j++){
                if(v1[i]+v2[j] <= d){
                    cnt++;
                }
            }
        }
        v1.insert(v1.end(),v2.begin(),v2.end());
        return v1;
    }
    
    int countPairs(TreeNode* root, int dist) {
        cnt=0;
        traverse(root,dist);
        return cnt;
    }
};